<html>
<head>
	<script src = "https://code.jquery.com/jquery-1.11.3.min.js" type = "text/javascript"></script>
    <!-- <script src = "highcharts.js" type = "text/javascript"></script>
    <script src="http://code.highcharts.com/modules/exporting.js"></script> -->
    <script src="http://d3js.org/d3.v3.min.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css">
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js"></script>
   
    <style>
        div.tooltip{
            position: absolute;
            text-align: center;
            padding:12px;
            font:12px sans-serif;
            background: lightsteelblue;
            border:0px;
            border-radius:8px;
            pointer-events:none;
        }
        .axis{
            fill: none;
            stroke: black;
            stroke-width: 1;
            shape-rendering: crispEdges;
        }
        .grid .tick {
            stroke: lightgrey;
            stroke-opacity: 0.7;
            shape-rendering: crispEdges;
        }
        .grid path{
            stroke-width:0;
        }
        .top-buffer{
            margin-top:20px;
        }
    </style>
</head>
<body>
        <div class="container">
            <div class="row"> 
                        <div class="col-md-2">
                            <input type='file' id="filebrowsed">
                        </div>
                        <div class="col-md-3">
                            <label>xAxis</label>
                            <select id='xaxis'></select>
                        </div>
                        <div class="col-md-3">
                            <label>yAxis</label>
                            <select id='yaxis'></select>
                        </div>
                        <div class="col-md-2">
                            <label>Delemiter</label>
                            <select id="delim">
                                <option value=','>CSV</option>
                                <option value='\t'>TSV</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <button id='btnPlot' disabled>Plot</button>
                        </div>
                </div>
            <div class="row">
                <div class="col-md-12">
                    <div id='d3Chart'></div>
                </div>
            </div>
        </div>
        <div class="container">
            <div class="row">
                <div class="col-md-12 table-responsive">
                    <table id="tbl1" class="table table-hover table-fixed"> 
                        <thead>
                            <tr></tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table> 
                </div>
            </div>
        </div>
    <script type="text/javascript">
        $(document).ready(function(event){
            var fileContent, rawdata = {};
            var fields, auxilaryFields, fieldCount;

            function readerHandler(e2){
                fileContent = e2.target.result;
                fileContent = fileContent.split('\n');
                $.each(fileContent, function(idx, line){
                    if(idx == 0){
                        fields = line.trim().split('\t');
                        $.each(fields, function(idx, fieldName){
                            rawdata[fieldName] = [];
                        });
                        fieldCount = fields.length;
                    }else{
                        row = line.trim().split('\t');
                        if(row.length == fieldCount){
                            $.each(fields, function(idx, fieldName){
                                rawdata[fieldName].push(Number(row[idx]))
                            });
                        }
                    }
                });
                
                auxilaryFields = [].concat(fields);
                $("#xaxis").empty();    //Clear the dropdown boxes before refilling
                $("#yaxis").empty();
                $.each(fields, function(idx, fieldName){    //fill the drop down box
                    $("#xaxis").append('<option name = "' + fieldName + '">' + fieldName + '</option>');
                    $("#yaxis").append('<option name = "' + fieldName + '">' + fieldName + '</option>');
                    $("#btnPlot").prop('disabled', false);
                });
                $("select option:first-child").prop('selected', true);   //select the first option in each dropdown box

                
                //insert html table rows
                $.each(rawdata, function(field, values){
                    $('thead tr').append('<th>' + field + '</th>');
                });
                for(arbitraryKey in rawdata)break;
                $.each(rawdata[arbitraryKey], function(idx, value){
                    var row = '<tr>';
                    $.each(fields, function(colIdx, field){
                        row += '<td>' + rawdata[field][idx] + '</td>';
                    });
                    row += '</tr>';

                    $('tbody').append(row);
                });
            }
                
            function readfile(e1){  //A function to be called when the input control 'changes'
                var fileobj = e1.target.files[0];
                var fr = new FileReader();
                fr.readAsText(fileobj);
                fr.onload = readerHandler;
            } 
        
            var inputfile = document.getElementById('filebrowsed');
            inputfile.addEventListener('change', readfile, false);

            $("#btnPlot").on('click', function(){
                var chartData = [];
                var xaxis = $("#xaxis option:selected").text();
                var yaxis = $("#yaxis option:selected").text();
                
                var i = auxilaryFields.indexOf(xaxis);
                if(i != -1){
                    auxilaryFields.splice(i, 1);
                }
                i = auxilaryFields.indexOf(yaxis);
                if(i != -1){
                    auxilaryFields.splice(i, 1);
                }
                $.each(rawdata[fields[0]], function(idx1, value){
                    auxData = {}
                    $.each(auxilaryFields, function(idx2, fieldName){
                        auxData[fieldName] = rawdata[fieldName][idx1]
                    });
                    chartData.push({x:rawdata[xaxis][idx1], y:rawdata[yaxis][idx1], aux:auxData});
                });

                //D3js Version
                    
            var data1 = [], data2 = [];
            var i = 1
            /*for(j = 0; j < 15; j++){
                data1.push(Math.random().toFixed(3));
                data2.push(100 * Math.random().toFixed(3));
            }
            */
            $.each(rawdata[xaxis], function(idx, x1){
                data1.push(x1)
                data2.push(rawdata[yaxis][idx]);
            });

            var margin = {top:30, right:20, bottom:30, left:100};
            var w = 750 - margin.left - margin.right;
            var h = 250 - margin.top - margin.bottom;
           
            var x = d3.scale.linear()
                .domain(d3.extent(data1))
                .range([0, w]);

            var y = d3.scale.linear()
                .domain(d3.extent(data2))
                .range([h, 0]);
            
            function make_vLines(tickCount){ //A function to generate vertical grid lines
                return d3.svg.axis().scale(x)
                    .orient('bottom').ticks(tickCount);
            }
            function make_hLines(tickCount){//A function to generate horizontal grid lines
                return d3.svg.axis().scale(y)
                    .orient('left').ticks(tickCount);
            }

            var div = d3.select('body').append('div')   //A div element for tooltip
                .attr('class', 'tooltip')
                .style('opacity', 0);

            d3.select('#d3Chart').html(''); //Clear before redrawing 
            var chart = d3.select('#d3Chart').append('svg:svg')
                .attr('width', w + margin.left + margin.right)
                .attr('height', h + margin.top + margin.bottom)
                .append('svg:g')
                .attr('transform', 'translate(' + margin.left +', ' + margin.top + ')');

            var xAxis = d3.svg.axis().scale(x)
                .orient('bottom').ticks(5)

            var yAxis = d3.svg.axis().scale(y)
                .orient('left').ticks(5)

            var getPath = d3.svg.line()
                .x(function(d, i){return x(d);})
                .y(function(d, i){return y(data2[i]);});
            
            chart.append('svg:g')   //Add xAxis
                .attr('transform', 'translate(0, ' + h + ')')
                .attr('class', 'axis')
                .call(xAxis);
            chart.append('svg:text')//Add xAxis Label
                .attr('x', w/2)
                .attr('y', h + margin.bottom)
                .style('text-anchor', 'middle')
                .text(xaxis);
            
            chart.append('svg:g')
                .attr('class', 'axis')
                .call(yAxis);
            
            chart.append('svg:text')
                .attr('transform', 'rotate(-90)')
                .attr('x', 0 - h/2)
                .attr('y', 0 - margin.left)
                .style('text-anchor', 'middle')
                .attr('dy', '2em')
                .text(yaxis);

            chart.append('svg:g')   //Add vertical grid lines
                .attr('class', 'grid')
                .attr('transform', 'translate(0, ' + h + ')')
                .call(make_vLines(5)
                    .tickSize(-h, 0, 0)
                    .tickFormat('')
                );
            chart.append('svg:g')   //Add horizontal grid lines
                .attr('class', 'grid')
                .call(make_hLines(5)
                    .tickSize(-w, 0, 0)
                    .tickFormat('')
                );
            var title = xaxis + ' vs ' + yaxis;
            
            //Chart title
            chart.append('svg:text')
                .attr('x', w/2)
                .attr('y', 0 - margin.top / 2)
                .style('text-anchor', 'middle')
                .style('text-font', '16px')
                .text(title);

            /*
            chart.append('svg:line')    //Add the X axis 
                .attr('x1',0).attr('y1',0).attr('x2', w).attr('y2', 0)
                .style('stroke', 'black')

            chart.append('svg:line')    //Add the Y axis
                .attr('x1',0).attr('y1',0).attr('x2',0).attr('y2', -1 * h)
                .style('stroke', 'black')
            
            //xAxis label configuration
            chart.selectAll('.xLabel')
                .data(x.ticks(20)).style('font-size', '9pt')
                .enter().append('svg:text').attr('class', 'xLabel')
                .text(String).attr('x', function(i){ return x(i); })
                .attr('y', 20).attr('text-anchor', 'middle');

            //yAxis label configuration
            chart.selectAll('.yLabel')
                .data(y.ticks(5)).style('font-size', '9pt')
                .enter().append('svg:text').attr('class', 'yLabel')
                .text(String).attr('x',-20)
                .attr('y', function(i){return y(i); })
                .attr('text-anchor', 'middle');

           //xAxis ticks
           chart.selectAll('.xTicks')
                .data(x.ticks(20)).enter().append('svg:line')
                .attr('class', 'xTicks')
                .attr('x1', function(i){return x(i);}).attr('y1', 0)
                .attr('x2', function(i){return x(i);}).attr('y2', 10)
                .style('stroke', 'black')

            //yAxis ticks
            chart.selectAll('.yTicks')
                .data(y.ticks(5)).enter().append('svg:line').attr('class', 'yTicks')
                .attr('x1', 0).attr('y1', function(i){return y(i);})
                .attr('x2', -10).attr('y2', function(i){return y(i);})
                .style('stroke', 'black')
            */ 
            //Select all the data points           
            chart.selectAll('.dPoints')
                .data(data1).enter().append('svg:circle').attr('class', 'dPoints')
                .attr('cx', function(d){return x(d); })
                .attr('cy', function(d, i){return y(data2[i]);})
                .attr('r', 4).style('fill', 'blue')
                .on('mouseover', function(d,i){
                    var x = d.toFixed(2);
                    var y = data2[i].toFixed(2);
                    var html = '<b>' + xaxis + '</b>: ' + x + '<br />'
                            + '<b>' + yaxis + '</b>: ' + y + '<br /><br />';
                        
                        $.each(auxilaryFields, function(idx, value){
                            html += '<b>' + value + '</b>: ' + rawdata[value][i] + '<br />'
                        });
                       
                        div.transition()
                            .duration(100)
                            .style('opacity', 0.8);
                        div.html(html)
                            .style('left', (d3.event.pageX + 20) + 'px')
                            .style('top', (d3.event.pageY - 100) + 'px');
                            
                })
                .on('mouseout', function(d, i){
                    div.transition()
                        .duration(100)
                        .style('opacity', 0);
                })

                
                //Highcharts Version
                var options = {
                    chart:{
                        renderTo: 'container',
                        zoomType: 'x',

                    },
                    title:{
                        useHTML: true,
                        text: '<b>' + xaxis + '</b> vs <b>' + yaxis + '</b> plot'
                    },
                    xAxis: {
                        title: {
                            text: xaxis,
                            style:{
                                fontSize: '30px',
                                color: Highcharts.getOptions().colors[5]
                            }
                        }
                    },
                    yAxis: {
                        title: {
                            text: yaxis,
                            style:{
                                fontSize: '30px',
                                color: Highcharts.getOptions().colors[5]
                            }
                        }
                    },
                    tooltip:{
                        useHTML: true,
                        formatter: function(){
                            var html = '<b>' + xaxis + ':</b> ' + this.point.x + '<br />'
                                + '<b>' + yaxis + ':</b> ' + this.point.y + '<br /><br />';
                            $.each(this.point.aux, function(key, value){
                                html += '<b>' + key + ':</b> ' + value + '<br />';
                            });
                            return html;
                        }

                    },
                    series:[{
                        name: 'Data',
                        type: 'scatter',
                        turboThreshold: chartData.length,
                        data:chartData,
                        color: Highcharts.getOptions().colors[5]
                    }]
                };
                //var chart = new Highcharts.Chart(options);
            });
        });
    </script>
</body>
</html>
